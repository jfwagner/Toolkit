#!/usr/bin/env python
# --------------------------------------------------------------------
# Andrea Santamaria Garcia, May 2016.
# --------------------------------------------------------------------
# The script will loop through the directories of rootdir, which 
# should contain folders named 'job_number', each one containing a dump
# file generated by SixTrack. The number represents the phase trip.
# It will take all the dump files and merge them in one, filtering
# only the particle with ID=1. 
# --------------------------------------------------------------------
import os
import sys
from math import sqrt

import numpy as np

from util import GetData

# --------------------------------------------------------------------
# Input path of the simulation folders and turn
# --------------------------------------------------------------------
rootdir = sys.argv[1]
tau = float(sys.argv[2])

# --------------------------------------------------------------------
# Parameters (from MAD-X Twiss)
# --------------------------------------------------------------------
emittance_norm = 2.5e-6  # um
# --------------------------------------------------------------------
beta_x = 0.150739  # [m]
beta_y = 0.150235
# --------------------------------------------------------------------
alpha_x = 0.003485
alpha_y = -0.000764
# --------------------------------------------------------------------
gamma_x = (1 + alpha_x**2)/beta_x
gamma_y = (1 + alpha_y**2)/beta_y
# --------------------------------------------------------------------
energy = 7e12  # Beam energy at collision [eV]

# --------------------------------------------------------------------
# Constants
# --------------------------------------------------------------------
m_p = 938.272046e6  # Proton mass [eV/c^2]
c = 299792458  # Speed of light [m/s]
gamma_rel = energy/m_p  # Relativistic gamma
beta_rel = np.sqrt(1-(1/gamma_rel**2))  # Relativistic beta
emittance_geom = emittance_norm/(beta_rel*gamma_rel)
sigma_x = np.sqrt(emittance_geom*beta_x)
sigma_y = np.sqrt(emittance_geom*beta_y)

# --------------------------------------------------------------------
# Check if outfile exists, and if so remove it
# --------------------------------------------------------------------
outfile = 'dump_data.txt'
try:
    os.remove(outfile)
except OSError:
    pass

with open(outfile,'w') as f:
    for item in os.listdir(rootdir):
        if os.path.isdir(item):
            infile = os.path.join(os.path.join(rootdir, item), 'dump.txt')
            phase = int(item.strip('job_'))
        get = GetData(infile)
        data_dict = get.data_column(column=0, regex=r'1\b')
        for turn, x, xp, y, yp in zip(data_dict[1], data_dict[3], data_dict[4], data_dict[5], data_dict[6]):
            x  = float(x)*1e-3
            xp = float(xp)*1e-3
            y  = float(y)*1e-3
            yp = float(yp)*1e-3
            em_x = (gamma_x*x**2 + 2*alpha_x*x*xp + beta_x*xp**2)/(beta_rel*gamma_rel)
            em_y = (gamma_y*y**2 + 2*alpha_y*y*yp + beta_y*yp**2)/(beta_rel*gamma_rel)
            sig_x = np.sqrt(em_x*beta_x) / sigma_x
            sig_y = np.sqrt(em_y*beta_y) / sigma_y
            f.write('%.0f %.0f %.0f %.8E %.8E %.8E %.8E %.8E %.8E \n' % (tau, phase, float(turn), float(x), float(xp), float(y), float(yp), sig_x, sig_y))

# --------------------------------------------------------------------
# Check if outfile exists, and if so remove it
# --------------------------------------------------------------------
outfile = 'imp_real_data.txt'
try:
    os.remove(outfile)
except OSError:
    pass
    
with open(outfile,'w') as f:
    for item in os.listdir(rootdir):
        if os.path.isdir(item):
            infile = os.path.join(os.path.join(rootdir, item), 'impacts_real.dat')
            phase = int(item.strip('job_'))
        get = GetData(infile)
        data_dict = get.data_column(column=0, regex=r'1\b')
        for turn, x, xp, y, yp in zip(data_dict[1], data_dict[3], data_dict[4], data_dict[5], data_dict[6]):
            x  = float(x)*1e-3
            xp = float(xp)*1e-3
            y  = float(y)*1e-3
            yp = float(yp)*1e-3
            em_x = (gamma_x*x**2 + 2*alpha_x*x*xp + beta_x*xp**2)/(beta_rel*gamma_rel)
            em_y = (gamma_y*y**2 + 2*alpha_y*y*yp + beta_y*yp**2)/(beta_rel*gamma_rel)
            sig_x = np.sqrt(em_x*beta_x) / sigma_x
            sig_y = np.sqrt(em_y*beta_y) / sigma_y
            f.write('%.0f %.0f %.0f %.8E %.8E %.8E %.8E %.8E %.8E \n' % (tau, phase, float(turn), float(x), float(xp), float(y), float(yp), sig_x, sig_y))